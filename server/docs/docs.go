// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Mohamad Jaafar Nehme",
            "url": "https://www.linkedin.com/in/mjnehme/",
            "email": "Mohamad.jaafar.nehme@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Welcome page for the Book Management API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Welcome page",
                "responses": {
                    "200": {
                        "description": "Returns the homepage",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    }
                }
            }
        },
        "/books": {
            "get": {
                "description": "Retrieve a list of all books",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "List books",
                "responses": {
                    "200": {
                        "description": "Returns the list of books",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Book"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve books",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new book to the library",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Add a new book",
                "parameters": [
                    {
                        "description": "New Book details",
                        "name": "newBook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the newly created book",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON data or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create book",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/count": {
            "get": {
                "description": "Get the total count of books",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Count books",
                "responses": {
                    "200": {
                        "description": "Returns the total count of books",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve books count",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/search": {
            "get": {
                "description": "Search for books based on various criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Search for books",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Title of the book",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Author of the book",
                        "name": "author",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Published date range start (YYYY-MM-DD)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Published date range end (YYYY-MM-DD)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Description of the book",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Genre of the book",
                        "name": "genre",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of matching books",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Book"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch books",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/{id}": {
            "get": {
                "description": "Retrieve a book by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Get a book by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the requested book",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "400": {
                        "description": "Invalid book ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Book not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch book",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a book's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Update a book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Book details",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the updated book",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON data or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Book not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update book",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a book by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Delete a book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a success message",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid book ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Book not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete book",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Partially update a book's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Patch a book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Book details",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the updated book",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON data or validation error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Book not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update book",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the status of the Book Management API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Returns the status message",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handlers.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Book": {
            "description": "This struct defines the properties of a book entity.",
            "type": "object",
            "required": [
                "author",
                "title"
            ],
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Author of the book",
                    "default": "Mohamad-Jaafar NEHME"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the book",
                    "default": "A great book on how to implement a book management app in Golang"
                },
                "edition": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Edition of the book",
                    "default": 1
                },
                "genre_name": {
                    "type": "string",
                    "description": "Genre of the book",
                    "default": "Computer Science"
                },
                "published": {
                    "type": "string",
                    "description": "Published date of the book",
                    "format": "date-time",
                    "default": "2023-09-15T10:00:00Z"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the book",
                    "default": "How to implement a Library"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:8090",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Library API Swagger",
	Description:      "A book management API server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

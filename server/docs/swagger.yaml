basePath: /api/v1
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.Book:
    description: This struct defines the properties of a book entity.
    type: object
    required:
      - author
      - title
    properties:
      author:
        type: string
        default: "Mohamad-Jaafar NEHME"
      description:
        type: string
        default: "A great book on how to implement a book management app in Golang"
      edition:
        type: integer
        minimum: 1
        default: 1
      genre_name:
        type: string
        default: "Computer Science"
      published:
        type: string
        format: date-time
        default: "2023-09-15T10:00:00Z"
      title:
        type: string
        default: "How to implement a Library"
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8090
info:
  contact:
    email: Mohamad.jaafar.nehme@gmail.com
    name: Mohamad Jaafar Nehme
    url: https://www.linkedin.com/in/mjnehme/
  description: A book management API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Library API Swagger
  version: "2.0"
paths:
  /:
    get:
      description: Welcome page for the Book Management API
      produces:
      - application/json
      responses:
        "200":
          description: Returns the homepage
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
      summary: Welcome page
      tags:
      - info
  /books:
    get:
      description: Retrieve a list of all books
      produces:
      - application/json
      responses:
        "200":
          description: Returns the list of books
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "500":
          description: Failed to retrieve books
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the library
      parameters:
      - description: New Book details
        in: body
        name: newBook
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Returns the newly created book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Invalid JSON data or validation error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to create book
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Add a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Delete a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns a success message
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "400":
          description: Invalid book ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to delete book
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a book
      tags:
      - books
    get:
      description: Retrieve a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the requested book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Invalid book ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to fetch book
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a book by ID
      tags:
      - books
    patch:
      consumes:
      - application/json
      description: Partially update a book's details
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Book details
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Invalid JSON data or validation error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to update book
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Patch a book
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update a book's details
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Book details
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated book
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Invalid JSON data or validation error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to update book
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a book
      tags:
      - books
  /books/count:
    get:
      description: Get the total count of books
      produces:
      - application/json
      responses:
        "200":
          description: Returns the total count of books
          schema:
            type: integer
        "500":
          description: Failed to retrieve books count
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Count books
      tags:
      - books
  /books/search:
    get:
      description: Search for books based on various criteria
      parameters:
      - description: Title of the book
        in: query
        name: title
        type: string
      - description: Author of the book
        in: query
        name: author
        type: string
      - description: Published date range start (YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: Published date range end (YYYY-MM-DD)
        in: query
        name: to
        type: string
      - description: Description of the book
        in: query
        name: description
        type: string
      - description: Genre of the book
        in: query
        name: genre
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns the list of matching books
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "500":
          description: Failed to fetch books
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Search for books
      tags:
      - books
  /health:
    get:
      description: Check the status of the Book Management API
      produces:
      - application/json
      responses:
        "200":
          description: Returns the status message
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
      summary: Health check
      tags:
      - info
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
